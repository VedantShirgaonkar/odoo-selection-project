
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model SwapRequest
 * 
 */
export type SwapRequest = $Result.DefaultSelection<Prisma.$SwapRequestPayload>
/**
 * Model Swap
 * 
 */
export type Swap = $Result.DefaultSelection<Prisma.$SwapPayload>
/**
 * Model UserSwap
 * 
 */
export type UserSwap = $Result.DefaultSelection<Prisma.$UserSwapPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ItemStatus: {
  AVAILABLE: 'AVAILABLE',
  PENDING: 'PENDING',
  SWAPPED: 'SWAPPED',
  REDEEMED: 'REDEEMED',
  REJECTED: 'REJECTED'
};

export type ItemStatus = (typeof ItemStatus)[keyof typeof ItemStatus]


export const SwapType: {
  DIRECT: 'DIRECT',
  POINTS: 'POINTS'
};

export type SwapType = (typeof SwapType)[keyof typeof SwapType]


export const RequestStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]

}

export type ItemStatus = $Enums.ItemStatus

export const ItemStatus: typeof $Enums.ItemStatus

export type SwapType = $Enums.SwapType

export const SwapType: typeof $Enums.SwapType

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.swapRequest`: Exposes CRUD operations for the **SwapRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SwapRequests
    * const swapRequests = await prisma.swapRequest.findMany()
    * ```
    */
  get swapRequest(): Prisma.SwapRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.swap`: Exposes CRUD operations for the **Swap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Swaps
    * const swaps = await prisma.swap.findMany()
    * ```
    */
  get swap(): Prisma.SwapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSwap`: Exposes CRUD operations for the **UserSwap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSwaps
    * const userSwaps = await prisma.userSwap.findMany()
    * ```
    */
  get userSwap(): Prisma.UserSwapDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Item: 'Item',
    SwapRequest: 'SwapRequest',
    Swap: 'Swap',
    UserSwap: 'UserSwap'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "item" | "swapRequest" | "swap" | "userSwap"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ItemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ItemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      SwapRequest: {
        payload: Prisma.$SwapRequestPayload<ExtArgs>
        fields: Prisma.SwapRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SwapRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwapRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findFirst: {
            args: Prisma.SwapRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwapRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          findMany: {
            args: Prisma.SwapRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>[]
          }
          create: {
            args: Prisma.SwapRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          createMany: {
            args: Prisma.SwapRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SwapRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          update: {
            args: Prisma.SwapRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          deleteMany: {
            args: Prisma.SwapRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SwapRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SwapRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapRequestPayload>
          }
          aggregate: {
            args: Prisma.SwapRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSwapRequest>
          }
          groupBy: {
            args: Prisma.SwapRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<SwapRequestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SwapRequestFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SwapRequestAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SwapRequestCountArgs<ExtArgs>
            result: $Utils.Optional<SwapRequestCountAggregateOutputType> | number
          }
        }
      }
      Swap: {
        payload: Prisma.$SwapPayload<ExtArgs>
        fields: Prisma.SwapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SwapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          findFirst: {
            args: Prisma.SwapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          findMany: {
            args: Prisma.SwapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>[]
          }
          create: {
            args: Prisma.SwapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          createMany: {
            args: Prisma.SwapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SwapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          update: {
            args: Prisma.SwapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          deleteMany: {
            args: Prisma.SwapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SwapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SwapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SwapPayload>
          }
          aggregate: {
            args: Prisma.SwapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSwap>
          }
          groupBy: {
            args: Prisma.SwapGroupByArgs<ExtArgs>
            result: $Utils.Optional<SwapGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SwapFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SwapAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SwapCountArgs<ExtArgs>
            result: $Utils.Optional<SwapCountAggregateOutputType> | number
          }
        }
      }
      UserSwap: {
        payload: Prisma.$UserSwapPayload<ExtArgs>
        fields: Prisma.UserSwapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSwapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSwapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          findFirst: {
            args: Prisma.UserSwapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSwapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          findMany: {
            args: Prisma.UserSwapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>[]
          }
          create: {
            args: Prisma.UserSwapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          createMany: {
            args: Prisma.UserSwapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserSwapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          update: {
            args: Prisma.UserSwapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          deleteMany: {
            args: Prisma.UserSwapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSwapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSwapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSwapPayload>
          }
          aggregate: {
            args: Prisma.UserSwapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSwap>
          }
          groupBy: {
            args: Prisma.UserSwapGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSwapGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserSwapFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserSwapAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserSwapCountArgs<ExtArgs>
            result: $Utils.Optional<UserSwapCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    item?: ItemOmit
    swapRequest?: SwapRequestOmit
    swap?: SwapOmit
    userSwap?: UserSwapOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    items: number
    swapRequests: number
    userSwaps: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | UserCountOutputTypeCountItemsArgs
    swapRequests?: boolean | UserCountOutputTypeCountSwapRequestsArgs
    userSwaps?: boolean | UserCountOutputTypeCountUserSwapsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSwapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSwapWhereInput
  }


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    swapRequests: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    swapRequests?: boolean | ItemCountOutputTypeCountSwapRequestsArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountSwapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
  }


  /**
   * Count Type SwapCountOutputType
   */

  export type SwapCountOutputType = {
    userSwaps: number
  }

  export type SwapCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSwaps?: boolean | SwapCountOutputTypeCountUserSwapsArgs
  }

  // Custom InputTypes
  /**
   * SwapCountOutputType without action
   */
  export type SwapCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapCountOutputType
     */
    select?: SwapCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SwapCountOutputType without action
   */
  export type SwapCountOutputTypeCountUserSwapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSwapWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    points: number | null
  }

  export type UserSumAggregateOutputType = {
    points: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    points: number | null
    isAdmin: boolean | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    points: number | null
    isAdmin: boolean | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    points: number
    isAdmin: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    points?: true
  }

  export type UserSumAggregateInputType = {
    points?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    points?: true
    isAdmin?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    points?: true
    isAdmin?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    points?: true
    isAdmin?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    points: number
    isAdmin: boolean
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    points?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    items?: boolean | User$itemsArgs<ExtArgs>
    swapRequests?: boolean | User$swapRequestsArgs<ExtArgs>
    userSwaps?: boolean | User$userSwapsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    points?: boolean
    isAdmin?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "points" | "isAdmin" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | User$itemsArgs<ExtArgs>
    swapRequests?: boolean | User$swapRequestsArgs<ExtArgs>
    userSwaps?: boolean | User$userSwapsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      items: Prisma.$ItemPayload<ExtArgs>[]
      swapRequests: Prisma.$SwapRequestPayload<ExtArgs>[]
      userSwaps: Prisma.$UserSwapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      points: number
      isAdmin: boolean
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends User$itemsArgs<ExtArgs> = {}>(args?: Subset<T, User$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    swapRequests<T extends User$swapRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$swapRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userSwaps<T extends User$userSwapsArgs<ExtArgs> = {}>(args?: Subset<T, User$userSwapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly points: FieldRef<"User", 'Int'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.items
   */
  export type User$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * User.swapRequests
   */
  export type User$swapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    cursor?: SwapRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * User.userSwaps
   */
  export type User$userSwapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    where?: UserSwapWhereInput
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    cursor?: UserSwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSwapScalarFieldEnum | UserSwapScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    type: string | null
    size: string | null
    condition: string | null
    uploaderId: string | null
    status: $Enums.ItemStatus | null
    createdAt: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    type: string | null
    size: string | null
    condition: string | null
    uploaderId: string | null
    status: $Enums.ItemStatus | null
    createdAt: Date | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    type: number
    size: number
    condition: number
    tags: number
    images: number
    uploaderId: number
    status: number
    createdAt: number
    _all: number
  }


  export type ItemMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    type?: true
    size?: true
    condition?: true
    uploaderId?: true
    status?: true
    createdAt?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    type?: true
    size?: true
    condition?: true
    uploaderId?: true
    status?: true
    createdAt?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    type?: true
    size?: true
    condition?: true
    tags?: true
    images?: true
    uploaderId?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags: string[]
    images: string[]
    uploaderId: string
    status: $Enums.ItemStatus
    createdAt: Date
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    size?: boolean
    condition?: boolean
    tags?: boolean
    images?: boolean
    uploaderId?: boolean
    status?: boolean
    createdAt?: boolean
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    swapRequests?: boolean | Item$swapRequestsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>



  export type ItemSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    type?: boolean
    size?: boolean
    condition?: boolean
    tags?: boolean
    images?: boolean
    uploaderId?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type ItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "category" | "type" | "size" | "condition" | "tags" | "images" | "uploaderId" | "status" | "createdAt", ExtArgs["result"]["item"]>
  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    swapRequests?: boolean | Item$swapRequestsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      uploader: Prisma.$UserPayload<ExtArgs>
      swapRequests: Prisma.$SwapRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      category: string
      type: string
      size: string
      condition: string
      tags: string[]
      images: string[]
      uploaderId: string
      status: $Enums.ItemStatus
      createdAt: Date
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * @param {ItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const item = await prisma.item.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ItemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Item.
     * @param {ItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const item = await prisma.item.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ItemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    swapRequests<T extends Item$swapRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Item$swapRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'String'>
    readonly title: FieldRef<"Item", 'String'>
    readonly description: FieldRef<"Item", 'String'>
    readonly category: FieldRef<"Item", 'String'>
    readonly type: FieldRef<"Item", 'String'>
    readonly size: FieldRef<"Item", 'String'>
    readonly condition: FieldRef<"Item", 'String'>
    readonly tags: FieldRef<"Item", 'String[]'>
    readonly images: FieldRef<"Item", 'String[]'>
    readonly uploaderId: FieldRef<"Item", 'String'>
    readonly status: FieldRef<"Item", 'ItemStatus'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to delete.
     */
    limit?: number
  }

  /**
   * Item findRaw
   */
  export type ItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Item aggregateRaw
   */
  export type ItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Item.swapRequests
   */
  export type Item$swapRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    cursor?: SwapRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model SwapRequest
   */

  export type AggregateSwapRequest = {
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  export type SwapRequestMinAggregateOutputType = {
    id: string | null
    itemId: string | null
    requesterId: string | null
    type: $Enums.SwapType | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
  }

  export type SwapRequestMaxAggregateOutputType = {
    id: string | null
    itemId: string | null
    requesterId: string | null
    type: $Enums.SwapType | null
    status: $Enums.RequestStatus | null
    createdAt: Date | null
  }

  export type SwapRequestCountAggregateOutputType = {
    id: number
    itemId: number
    requesterId: number
    type: number
    status: number
    createdAt: number
    _all: number
  }


  export type SwapRequestMinAggregateInputType = {
    id?: true
    itemId?: true
    requesterId?: true
    type?: true
    status?: true
    createdAt?: true
  }

  export type SwapRequestMaxAggregateInputType = {
    id?: true
    itemId?: true
    requesterId?: true
    type?: true
    status?: true
    createdAt?: true
  }

  export type SwapRequestCountAggregateInputType = {
    id?: true
    itemId?: true
    requesterId?: true
    type?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type SwapRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequest to aggregate.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SwapRequests
    **/
    _count?: true | SwapRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapRequestMaxAggregateInputType
  }

  export type GetSwapRequestAggregateType<T extends SwapRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateSwapRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwapRequest[P]>
      : GetScalarType<T[P], AggregateSwapRequest[P]>
  }




  export type SwapRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapRequestWhereInput
    orderBy?: SwapRequestOrderByWithAggregationInput | SwapRequestOrderByWithAggregationInput[]
    by: SwapRequestScalarFieldEnum[] | SwapRequestScalarFieldEnum
    having?: SwapRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapRequestCountAggregateInputType | true
    _min?: SwapRequestMinAggregateInputType
    _max?: SwapRequestMaxAggregateInputType
  }

  export type SwapRequestGroupByOutputType = {
    id: string
    itemId: string
    requesterId: string
    type: $Enums.SwapType
    status: $Enums.RequestStatus
    createdAt: Date
    _count: SwapRequestCountAggregateOutputType | null
    _min: SwapRequestMinAggregateOutputType | null
    _max: SwapRequestMaxAggregateOutputType | null
  }

  type GetSwapRequestGroupByPayload<T extends SwapRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
            : GetScalarType<T[P], SwapRequestGroupByOutputType[P]>
        }
      >
    >


  export type SwapRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    requesterId?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swapRequest"]>



  export type SwapRequestSelectScalar = {
    id?: boolean
    itemId?: boolean
    requesterId?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type SwapRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "requesterId" | "type" | "status" | "createdAt", ExtArgs["result"]["swapRequest"]>
  export type SwapRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    requester?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SwapRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SwapRequest"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
      requester: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemId: string
      requesterId: string
      type: $Enums.SwapType
      status: $Enums.RequestStatus
      createdAt: Date
    }, ExtArgs["result"]["swapRequest"]>
    composites: {}
  }

  type SwapRequestGetPayload<S extends boolean | null | undefined | SwapRequestDefaultArgs> = $Result.GetResult<Prisma.$SwapRequestPayload, S>

  type SwapRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SwapRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SwapRequestCountAggregateInputType | true
    }

  export interface SwapRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SwapRequest'], meta: { name: 'SwapRequest' } }
    /**
     * Find zero or one SwapRequest that matches the filter.
     * @param {SwapRequestFindUniqueArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SwapRequestFindUniqueArgs>(args: SelectSubset<T, SwapRequestFindUniqueArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SwapRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SwapRequestFindUniqueOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SwapRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, SwapRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SwapRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SwapRequestFindFirstArgs>(args?: SelectSubset<T, SwapRequestFindFirstArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SwapRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindFirstOrThrowArgs} args - Arguments to find a SwapRequest
     * @example
     * // Get one SwapRequest
     * const swapRequest = await prisma.swapRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SwapRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, SwapRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SwapRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany()
     * 
     * // Get first 10 SwapRequests
     * const swapRequests = await prisma.swapRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapRequestWithIdOnly = await prisma.swapRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SwapRequestFindManyArgs>(args?: SelectSubset<T, SwapRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SwapRequest.
     * @param {SwapRequestCreateArgs} args - Arguments to create a SwapRequest.
     * @example
     * // Create one SwapRequest
     * const SwapRequest = await prisma.swapRequest.create({
     *   data: {
     *     // ... data to create a SwapRequest
     *   }
     * })
     * 
     */
    create<T extends SwapRequestCreateArgs>(args: SelectSubset<T, SwapRequestCreateArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SwapRequests.
     * @param {SwapRequestCreateManyArgs} args - Arguments to create many SwapRequests.
     * @example
     * // Create many SwapRequests
     * const swapRequest = await prisma.swapRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SwapRequestCreateManyArgs>(args?: SelectSubset<T, SwapRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SwapRequest.
     * @param {SwapRequestDeleteArgs} args - Arguments to delete one SwapRequest.
     * @example
     * // Delete one SwapRequest
     * const SwapRequest = await prisma.swapRequest.delete({
     *   where: {
     *     // ... filter to delete one SwapRequest
     *   }
     * })
     * 
     */
    delete<T extends SwapRequestDeleteArgs>(args: SelectSubset<T, SwapRequestDeleteArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SwapRequest.
     * @param {SwapRequestUpdateArgs} args - Arguments to update one SwapRequest.
     * @example
     * // Update one SwapRequest
     * const swapRequest = await prisma.swapRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SwapRequestUpdateArgs>(args: SelectSubset<T, SwapRequestUpdateArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SwapRequests.
     * @param {SwapRequestDeleteManyArgs} args - Arguments to filter SwapRequests to delete.
     * @example
     * // Delete a few SwapRequests
     * const { count } = await prisma.swapRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SwapRequestDeleteManyArgs>(args?: SelectSubset<T, SwapRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SwapRequests
     * const swapRequest = await prisma.swapRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SwapRequestUpdateManyArgs>(args: SelectSubset<T, SwapRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SwapRequest.
     * @param {SwapRequestUpsertArgs} args - Arguments to update or create a SwapRequest.
     * @example
     * // Update or create a SwapRequest
     * const swapRequest = await prisma.swapRequest.upsert({
     *   create: {
     *     // ... data to create a SwapRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SwapRequest we want to update
     *   }
     * })
     */
    upsert<T extends SwapRequestUpsertArgs>(args: SelectSubset<T, SwapRequestUpsertArgs<ExtArgs>>): Prisma__SwapRequestClient<$Result.GetResult<Prisma.$SwapRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SwapRequests that matches the filter.
     * @param {SwapRequestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const swapRequest = await prisma.swapRequest.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SwapRequestFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SwapRequest.
     * @param {SwapRequestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const swapRequest = await prisma.swapRequest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SwapRequestAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SwapRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestCountArgs} args - Arguments to filter SwapRequests to count.
     * @example
     * // Count the number of SwapRequests
     * const count = await prisma.swapRequest.count({
     *   where: {
     *     // ... the filter for the SwapRequests we want to count
     *   }
     * })
    **/
    count<T extends SwapRequestCountArgs>(
      args?: Subset<T, SwapRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapRequestAggregateArgs>(args: Subset<T, SwapRequestAggregateArgs>): Prisma.PrismaPromise<GetSwapRequestAggregateType<T>>

    /**
     * Group by SwapRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwapRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwapRequestGroupByArgs['orderBy'] }
        : { orderBy?: SwapRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwapRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SwapRequest model
   */
  readonly fields: SwapRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SwapRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SwapRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SwapRequest model
   */
  interface SwapRequestFieldRefs {
    readonly id: FieldRef<"SwapRequest", 'String'>
    readonly itemId: FieldRef<"SwapRequest", 'String'>
    readonly requesterId: FieldRef<"SwapRequest", 'String'>
    readonly type: FieldRef<"SwapRequest", 'SwapType'>
    readonly status: FieldRef<"SwapRequest", 'RequestStatus'>
    readonly createdAt: FieldRef<"SwapRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SwapRequest findUnique
   */
  export type SwapRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findUniqueOrThrow
   */
  export type SwapRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest findFirst
   */
  export type SwapRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findFirstOrThrow
   */
  export type SwapRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequest to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwapRequests.
     */
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest findMany
   */
  export type SwapRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter, which SwapRequests to fetch.
     */
    where?: SwapRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwapRequests to fetch.
     */
    orderBy?: SwapRequestOrderByWithRelationInput | SwapRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SwapRequests.
     */
    cursor?: SwapRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwapRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwapRequests.
     */
    skip?: number
    distinct?: SwapRequestScalarFieldEnum | SwapRequestScalarFieldEnum[]
  }

  /**
   * SwapRequest create
   */
  export type SwapRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a SwapRequest.
     */
    data: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
  }

  /**
   * SwapRequest createMany
   */
  export type SwapRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SwapRequests.
     */
    data: SwapRequestCreateManyInput | SwapRequestCreateManyInput[]
  }

  /**
   * SwapRequest update
   */
  export type SwapRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a SwapRequest.
     */
    data: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
    /**
     * Choose, which SwapRequest to update.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest updateMany
   */
  export type SwapRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SwapRequests.
     */
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyInput>
    /**
     * Filter which SwapRequests to update
     */
    where?: SwapRequestWhereInput
    /**
     * Limit how many SwapRequests to update.
     */
    limit?: number
  }

  /**
   * SwapRequest upsert
   */
  export type SwapRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the SwapRequest to update in case it exists.
     */
    where: SwapRequestWhereUniqueInput
    /**
     * In case the SwapRequest found by the `where` argument doesn't exist, create a new SwapRequest with this data.
     */
    create: XOR<SwapRequestCreateInput, SwapRequestUncheckedCreateInput>
    /**
     * In case the SwapRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwapRequestUpdateInput, SwapRequestUncheckedUpdateInput>
  }

  /**
   * SwapRequest delete
   */
  export type SwapRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
    /**
     * Filter which SwapRequest to delete.
     */
    where: SwapRequestWhereUniqueInput
  }

  /**
   * SwapRequest deleteMany
   */
  export type SwapRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwapRequests to delete
     */
    where?: SwapRequestWhereInput
    /**
     * Limit how many SwapRequests to delete.
     */
    limit?: number
  }

  /**
   * SwapRequest findRaw
   */
  export type SwapRequestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SwapRequest aggregateRaw
   */
  export type SwapRequestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SwapRequest without action
   */
  export type SwapRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwapRequest
     */
    select?: SwapRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SwapRequest
     */
    omit?: SwapRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapRequestInclude<ExtArgs> | null
  }


  /**
   * Model Swap
   */

  export type AggregateSwap = {
    _count: SwapCountAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  export type SwapMinAggregateOutputType = {
    id: string | null
    type: $Enums.SwapType | null
    createdAt: Date | null
  }

  export type SwapMaxAggregateOutputType = {
    id: string | null
    type: $Enums.SwapType | null
    createdAt: Date | null
  }

  export type SwapCountAggregateOutputType = {
    id: number
    itemIds: number
    type: number
    createdAt: number
    _all: number
  }


  export type SwapMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
  }

  export type SwapMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
  }

  export type SwapCountAggregateInputType = {
    id?: true
    itemIds?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type SwapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Swap to aggregate.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Swaps
    **/
    _count?: true | SwapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapMaxAggregateInputType
  }

  export type GetSwapAggregateType<T extends SwapAggregateArgs> = {
        [P in keyof T & keyof AggregateSwap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwap[P]>
      : GetScalarType<T[P], AggregateSwap[P]>
  }




  export type SwapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SwapWhereInput
    orderBy?: SwapOrderByWithAggregationInput | SwapOrderByWithAggregationInput[]
    by: SwapScalarFieldEnum[] | SwapScalarFieldEnum
    having?: SwapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapCountAggregateInputType | true
    _min?: SwapMinAggregateInputType
    _max?: SwapMaxAggregateInputType
  }

  export type SwapGroupByOutputType = {
    id: string
    itemIds: string[]
    type: $Enums.SwapType
    createdAt: Date
    _count: SwapCountAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  type GetSwapGroupByPayload<T extends SwapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapGroupByOutputType[P]>
            : GetScalarType<T[P], SwapGroupByOutputType[P]>
        }
      >
    >


  export type SwapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemIds?: boolean
    type?: boolean
    createdAt?: boolean
    userSwaps?: boolean | Swap$userSwapsArgs<ExtArgs>
    _count?: boolean | SwapCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["swap"]>



  export type SwapSelectScalar = {
    id?: boolean
    itemIds?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type SwapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemIds" | "type" | "createdAt", ExtArgs["result"]["swap"]>
  export type SwapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userSwaps?: boolean | Swap$userSwapsArgs<ExtArgs>
    _count?: boolean | SwapCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SwapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Swap"
    objects: {
      userSwaps: Prisma.$UserSwapPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemIds: string[]
      type: $Enums.SwapType
      createdAt: Date
    }, ExtArgs["result"]["swap"]>
    composites: {}
  }

  type SwapGetPayload<S extends boolean | null | undefined | SwapDefaultArgs> = $Result.GetResult<Prisma.$SwapPayload, S>

  type SwapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SwapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SwapCountAggregateInputType | true
    }

  export interface SwapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Swap'], meta: { name: 'Swap' } }
    /**
     * Find zero or one Swap that matches the filter.
     * @param {SwapFindUniqueArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SwapFindUniqueArgs>(args: SelectSubset<T, SwapFindUniqueArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Swap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SwapFindUniqueOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SwapFindUniqueOrThrowArgs>(args: SelectSubset<T, SwapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Swap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindFirstArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SwapFindFirstArgs>(args?: SelectSubset<T, SwapFindFirstArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Swap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindFirstOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SwapFindFirstOrThrowArgs>(args?: SelectSubset<T, SwapFindFirstOrThrowArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Swaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Swaps
     * const swaps = await prisma.swap.findMany()
     * 
     * // Get first 10 Swaps
     * const swaps = await prisma.swap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapWithIdOnly = await prisma.swap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SwapFindManyArgs>(args?: SelectSubset<T, SwapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Swap.
     * @param {SwapCreateArgs} args - Arguments to create a Swap.
     * @example
     * // Create one Swap
     * const Swap = await prisma.swap.create({
     *   data: {
     *     // ... data to create a Swap
     *   }
     * })
     * 
     */
    create<T extends SwapCreateArgs>(args: SelectSubset<T, SwapCreateArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Swaps.
     * @param {SwapCreateManyArgs} args - Arguments to create many Swaps.
     * @example
     * // Create many Swaps
     * const swap = await prisma.swap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SwapCreateManyArgs>(args?: SelectSubset<T, SwapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Swap.
     * @param {SwapDeleteArgs} args - Arguments to delete one Swap.
     * @example
     * // Delete one Swap
     * const Swap = await prisma.swap.delete({
     *   where: {
     *     // ... filter to delete one Swap
     *   }
     * })
     * 
     */
    delete<T extends SwapDeleteArgs>(args: SelectSubset<T, SwapDeleteArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Swap.
     * @param {SwapUpdateArgs} args - Arguments to update one Swap.
     * @example
     * // Update one Swap
     * const swap = await prisma.swap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SwapUpdateArgs>(args: SelectSubset<T, SwapUpdateArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Swaps.
     * @param {SwapDeleteManyArgs} args - Arguments to filter Swaps to delete.
     * @example
     * // Delete a few Swaps
     * const { count } = await prisma.swap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SwapDeleteManyArgs>(args?: SelectSubset<T, SwapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Swaps
     * const swap = await prisma.swap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SwapUpdateManyArgs>(args: SelectSubset<T, SwapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Swap.
     * @param {SwapUpsertArgs} args - Arguments to update or create a Swap.
     * @example
     * // Update or create a Swap
     * const swap = await prisma.swap.upsert({
     *   create: {
     *     // ... data to create a Swap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Swap we want to update
     *   }
     * })
     */
    upsert<T extends SwapUpsertArgs>(args: SelectSubset<T, SwapUpsertArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Swaps that matches the filter.
     * @param {SwapFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const swap = await prisma.swap.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SwapFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Swap.
     * @param {SwapAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const swap = await prisma.swap.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SwapAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapCountArgs} args - Arguments to filter Swaps to count.
     * @example
     * // Count the number of Swaps
     * const count = await prisma.swap.count({
     *   where: {
     *     // ... the filter for the Swaps we want to count
     *   }
     * })
    **/
    count<T extends SwapCountArgs>(
      args?: Subset<T, SwapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapAggregateArgs>(args: Subset<T, SwapAggregateArgs>): Prisma.PrismaPromise<GetSwapAggregateType<T>>

    /**
     * Group by Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwapGroupByArgs['orderBy'] }
        : { orderBy?: SwapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Swap model
   */
  readonly fields: SwapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Swap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SwapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userSwaps<T extends Swap$userSwapsArgs<ExtArgs> = {}>(args?: Subset<T, Swap$userSwapsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Swap model
   */
  interface SwapFieldRefs {
    readonly id: FieldRef<"Swap", 'String'>
    readonly itemIds: FieldRef<"Swap", 'String[]'>
    readonly type: FieldRef<"Swap", 'SwapType'>
    readonly createdAt: FieldRef<"Swap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Swap findUnique
   */
  export type SwapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap findUniqueOrThrow
   */
  export type SwapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap findFirst
   */
  export type SwapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap findFirstOrThrow
   */
  export type SwapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swap to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap findMany
   */
  export type SwapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter, which Swaps to fetch.
     */
    where?: SwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Swaps to fetch.
     */
    orderBy?: SwapOrderByWithRelationInput | SwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Swaps.
     */
    cursor?: SwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Swaps.
     */
    skip?: number
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * Swap create
   */
  export type SwapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The data needed to create a Swap.
     */
    data: XOR<SwapCreateInput, SwapUncheckedCreateInput>
  }

  /**
   * Swap createMany
   */
  export type SwapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Swaps.
     */
    data: SwapCreateManyInput | SwapCreateManyInput[]
  }

  /**
   * Swap update
   */
  export type SwapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The data needed to update a Swap.
     */
    data: XOR<SwapUpdateInput, SwapUncheckedUpdateInput>
    /**
     * Choose, which Swap to update.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap updateMany
   */
  export type SwapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Swaps.
     */
    data: XOR<SwapUpdateManyMutationInput, SwapUncheckedUpdateManyInput>
    /**
     * Filter which Swaps to update
     */
    where?: SwapWhereInput
    /**
     * Limit how many Swaps to update.
     */
    limit?: number
  }

  /**
   * Swap upsert
   */
  export type SwapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * The filter to search for the Swap to update in case it exists.
     */
    where: SwapWhereUniqueInput
    /**
     * In case the Swap found by the `where` argument doesn't exist, create a new Swap with this data.
     */
    create: XOR<SwapCreateInput, SwapUncheckedCreateInput>
    /**
     * In case the Swap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwapUpdateInput, SwapUncheckedUpdateInput>
  }

  /**
   * Swap delete
   */
  export type SwapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
    /**
     * Filter which Swap to delete.
     */
    where: SwapWhereUniqueInput
  }

  /**
   * Swap deleteMany
   */
  export type SwapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Swaps to delete
     */
    where?: SwapWhereInput
    /**
     * Limit how many Swaps to delete.
     */
    limit?: number
  }

  /**
   * Swap findRaw
   */
  export type SwapFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Swap aggregateRaw
   */
  export type SwapAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Swap.userSwaps
   */
  export type Swap$userSwapsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    where?: UserSwapWhereInput
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    cursor?: UserSwapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSwapScalarFieldEnum | UserSwapScalarFieldEnum[]
  }

  /**
   * Swap without action
   */
  export type SwapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Swap
     */
    select?: SwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Swap
     */
    omit?: SwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SwapInclude<ExtArgs> | null
  }


  /**
   * Model UserSwap
   */

  export type AggregateUserSwap = {
    _count: UserSwapCountAggregateOutputType | null
    _min: UserSwapMinAggregateOutputType | null
    _max: UserSwapMaxAggregateOutputType | null
  }

  export type UserSwapMinAggregateOutputType = {
    id: string | null
    userId: string | null
    swapId: string | null
  }

  export type UserSwapMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    swapId: string | null
  }

  export type UserSwapCountAggregateOutputType = {
    id: number
    userId: number
    swapId: number
    _all: number
  }


  export type UserSwapMinAggregateInputType = {
    id?: true
    userId?: true
    swapId?: true
  }

  export type UserSwapMaxAggregateInputType = {
    id?: true
    userId?: true
    swapId?: true
  }

  export type UserSwapCountAggregateInputType = {
    id?: true
    userId?: true
    swapId?: true
    _all?: true
  }

  export type UserSwapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSwap to aggregate.
     */
    where?: UserSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSwaps to fetch.
     */
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSwaps
    **/
    _count?: true | UserSwapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSwapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSwapMaxAggregateInputType
  }

  export type GetUserSwapAggregateType<T extends UserSwapAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSwap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSwap[P]>
      : GetScalarType<T[P], AggregateUserSwap[P]>
  }




  export type UserSwapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSwapWhereInput
    orderBy?: UserSwapOrderByWithAggregationInput | UserSwapOrderByWithAggregationInput[]
    by: UserSwapScalarFieldEnum[] | UserSwapScalarFieldEnum
    having?: UserSwapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSwapCountAggregateInputType | true
    _min?: UserSwapMinAggregateInputType
    _max?: UserSwapMaxAggregateInputType
  }

  export type UserSwapGroupByOutputType = {
    id: string
    userId: string
    swapId: string
    _count: UserSwapCountAggregateOutputType | null
    _min: UserSwapMinAggregateOutputType | null
    _max: UserSwapMaxAggregateOutputType | null
  }

  type GetUserSwapGroupByPayload<T extends UserSwapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSwapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSwapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSwapGroupByOutputType[P]>
            : GetScalarType<T[P], UserSwapGroupByOutputType[P]>
        }
      >
    >


  export type UserSwapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    swapId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | SwapDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSwap"]>



  export type UserSwapSelectScalar = {
    id?: boolean
    userId?: boolean
    swapId?: boolean
  }

  export type UserSwapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "swapId", ExtArgs["result"]["userSwap"]>
  export type UserSwapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    swap?: boolean | SwapDefaultArgs<ExtArgs>
  }

  export type $UserSwapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSwap"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      swap: Prisma.$SwapPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      swapId: string
    }, ExtArgs["result"]["userSwap"]>
    composites: {}
  }

  type UserSwapGetPayload<S extends boolean | null | undefined | UserSwapDefaultArgs> = $Result.GetResult<Prisma.$UserSwapPayload, S>

  type UserSwapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSwapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSwapCountAggregateInputType | true
    }

  export interface UserSwapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSwap'], meta: { name: 'UserSwap' } }
    /**
     * Find zero or one UserSwap that matches the filter.
     * @param {UserSwapFindUniqueArgs} args - Arguments to find a UserSwap
     * @example
     * // Get one UserSwap
     * const userSwap = await prisma.userSwap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSwapFindUniqueArgs>(args: SelectSubset<T, UserSwapFindUniqueArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSwap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSwapFindUniqueOrThrowArgs} args - Arguments to find a UserSwap
     * @example
     * // Get one UserSwap
     * const userSwap = await prisma.userSwap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSwapFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSwapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSwap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapFindFirstArgs} args - Arguments to find a UserSwap
     * @example
     * // Get one UserSwap
     * const userSwap = await prisma.userSwap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSwapFindFirstArgs>(args?: SelectSubset<T, UserSwapFindFirstArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSwap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapFindFirstOrThrowArgs} args - Arguments to find a UserSwap
     * @example
     * // Get one UserSwap
     * const userSwap = await prisma.userSwap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSwapFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSwapFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSwaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSwaps
     * const userSwaps = await prisma.userSwap.findMany()
     * 
     * // Get first 10 UserSwaps
     * const userSwaps = await prisma.userSwap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSwapWithIdOnly = await prisma.userSwap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSwapFindManyArgs>(args?: SelectSubset<T, UserSwapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSwap.
     * @param {UserSwapCreateArgs} args - Arguments to create a UserSwap.
     * @example
     * // Create one UserSwap
     * const UserSwap = await prisma.userSwap.create({
     *   data: {
     *     // ... data to create a UserSwap
     *   }
     * })
     * 
     */
    create<T extends UserSwapCreateArgs>(args: SelectSubset<T, UserSwapCreateArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSwaps.
     * @param {UserSwapCreateManyArgs} args - Arguments to create many UserSwaps.
     * @example
     * // Create many UserSwaps
     * const userSwap = await prisma.userSwap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSwapCreateManyArgs>(args?: SelectSubset<T, UserSwapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserSwap.
     * @param {UserSwapDeleteArgs} args - Arguments to delete one UserSwap.
     * @example
     * // Delete one UserSwap
     * const UserSwap = await prisma.userSwap.delete({
     *   where: {
     *     // ... filter to delete one UserSwap
     *   }
     * })
     * 
     */
    delete<T extends UserSwapDeleteArgs>(args: SelectSubset<T, UserSwapDeleteArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSwap.
     * @param {UserSwapUpdateArgs} args - Arguments to update one UserSwap.
     * @example
     * // Update one UserSwap
     * const userSwap = await prisma.userSwap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSwapUpdateArgs>(args: SelectSubset<T, UserSwapUpdateArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSwaps.
     * @param {UserSwapDeleteManyArgs} args - Arguments to filter UserSwaps to delete.
     * @example
     * // Delete a few UserSwaps
     * const { count } = await prisma.userSwap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSwapDeleteManyArgs>(args?: SelectSubset<T, UserSwapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSwaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSwaps
     * const userSwap = await prisma.userSwap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSwapUpdateManyArgs>(args: SelectSubset<T, UserSwapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSwap.
     * @param {UserSwapUpsertArgs} args - Arguments to update or create a UserSwap.
     * @example
     * // Update or create a UserSwap
     * const userSwap = await prisma.userSwap.upsert({
     *   create: {
     *     // ... data to create a UserSwap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSwap we want to update
     *   }
     * })
     */
    upsert<T extends UserSwapUpsertArgs>(args: SelectSubset<T, UserSwapUpsertArgs<ExtArgs>>): Prisma__UserSwapClient<$Result.GetResult<Prisma.$UserSwapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSwaps that matches the filter.
     * @param {UserSwapFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userSwap = await prisma.userSwap.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserSwapFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserSwap.
     * @param {UserSwapAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userSwap = await prisma.userSwap.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserSwapAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UserSwaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapCountArgs} args - Arguments to filter UserSwaps to count.
     * @example
     * // Count the number of UserSwaps
     * const count = await prisma.userSwap.count({
     *   where: {
     *     // ... the filter for the UserSwaps we want to count
     *   }
     * })
    **/
    count<T extends UserSwapCountArgs>(
      args?: Subset<T, UserSwapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSwapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSwap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSwapAggregateArgs>(args: Subset<T, UserSwapAggregateArgs>): Prisma.PrismaPromise<GetUserSwapAggregateType<T>>

    /**
     * Group by UserSwap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSwapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSwapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSwapGroupByArgs['orderBy'] }
        : { orderBy?: UserSwapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSwapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSwapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSwap model
   */
  readonly fields: UserSwapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSwap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSwapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    swap<T extends SwapDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SwapDefaultArgs<ExtArgs>>): Prisma__SwapClient<$Result.GetResult<Prisma.$SwapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSwap model
   */
  interface UserSwapFieldRefs {
    readonly id: FieldRef<"UserSwap", 'String'>
    readonly userId: FieldRef<"UserSwap", 'String'>
    readonly swapId: FieldRef<"UserSwap", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSwap findUnique
   */
  export type UserSwapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter, which UserSwap to fetch.
     */
    where: UserSwapWhereUniqueInput
  }

  /**
   * UserSwap findUniqueOrThrow
   */
  export type UserSwapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter, which UserSwap to fetch.
     */
    where: UserSwapWhereUniqueInput
  }

  /**
   * UserSwap findFirst
   */
  export type UserSwapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter, which UserSwap to fetch.
     */
    where?: UserSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSwaps to fetch.
     */
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSwaps.
     */
    cursor?: UserSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSwaps.
     */
    distinct?: UserSwapScalarFieldEnum | UserSwapScalarFieldEnum[]
  }

  /**
   * UserSwap findFirstOrThrow
   */
  export type UserSwapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter, which UserSwap to fetch.
     */
    where?: UserSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSwaps to fetch.
     */
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSwaps.
     */
    cursor?: UserSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSwaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSwaps.
     */
    distinct?: UserSwapScalarFieldEnum | UserSwapScalarFieldEnum[]
  }

  /**
   * UserSwap findMany
   */
  export type UserSwapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter, which UserSwaps to fetch.
     */
    where?: UserSwapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSwaps to fetch.
     */
    orderBy?: UserSwapOrderByWithRelationInput | UserSwapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSwaps.
     */
    cursor?: UserSwapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSwaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSwaps.
     */
    skip?: number
    distinct?: UserSwapScalarFieldEnum | UserSwapScalarFieldEnum[]
  }

  /**
   * UserSwap create
   */
  export type UserSwapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSwap.
     */
    data: XOR<UserSwapCreateInput, UserSwapUncheckedCreateInput>
  }

  /**
   * UserSwap createMany
   */
  export type UserSwapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSwaps.
     */
    data: UserSwapCreateManyInput | UserSwapCreateManyInput[]
  }

  /**
   * UserSwap update
   */
  export type UserSwapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSwap.
     */
    data: XOR<UserSwapUpdateInput, UserSwapUncheckedUpdateInput>
    /**
     * Choose, which UserSwap to update.
     */
    where: UserSwapWhereUniqueInput
  }

  /**
   * UserSwap updateMany
   */
  export type UserSwapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSwaps.
     */
    data: XOR<UserSwapUpdateManyMutationInput, UserSwapUncheckedUpdateManyInput>
    /**
     * Filter which UserSwaps to update
     */
    where?: UserSwapWhereInput
    /**
     * Limit how many UserSwaps to update.
     */
    limit?: number
  }

  /**
   * UserSwap upsert
   */
  export type UserSwapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSwap to update in case it exists.
     */
    where: UserSwapWhereUniqueInput
    /**
     * In case the UserSwap found by the `where` argument doesn't exist, create a new UserSwap with this data.
     */
    create: XOR<UserSwapCreateInput, UserSwapUncheckedCreateInput>
    /**
     * In case the UserSwap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSwapUpdateInput, UserSwapUncheckedUpdateInput>
  }

  /**
   * UserSwap delete
   */
  export type UserSwapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
    /**
     * Filter which UserSwap to delete.
     */
    where: UserSwapWhereUniqueInput
  }

  /**
   * UserSwap deleteMany
   */
  export type UserSwapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSwaps to delete
     */
    where?: UserSwapWhereInput
    /**
     * Limit how many UserSwaps to delete.
     */
    limit?: number
  }

  /**
   * UserSwap findRaw
   */
  export type UserSwapFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserSwap aggregateRaw
   */
  export type UserSwapAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UserSwap without action
   */
  export type UserSwapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSwap
     */
    select?: UserSwapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSwap
     */
    omit?: UserSwapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSwapInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    points: 'points',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    type: 'type',
    size: 'size',
    condition: 'condition',
    tags: 'tags',
    images: 'images',
    uploaderId: 'uploaderId',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const SwapRequestScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    requesterId: 'requesterId',
    type: 'type',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type SwapRequestScalarFieldEnum = (typeof SwapRequestScalarFieldEnum)[keyof typeof SwapRequestScalarFieldEnum]


  export const SwapScalarFieldEnum: {
    id: 'id',
    itemIds: 'itemIds',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type SwapScalarFieldEnum = (typeof SwapScalarFieldEnum)[keyof typeof SwapScalarFieldEnum]


  export const UserSwapScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    swapId: 'swapId'
  };

  export type UserSwapScalarFieldEnum = (typeof UserSwapScalarFieldEnum)[keyof typeof UserSwapScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ItemStatus'
   */
  export type EnumItemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ItemStatus'>
    


  /**
   * Reference to a field of type 'ItemStatus[]'
   */
  export type ListEnumItemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ItemStatus[]'>
    


  /**
   * Reference to a field of type 'SwapType'
   */
  export type EnumSwapTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SwapType'>
    


  /**
   * Reference to a field of type 'SwapType[]'
   */
  export type ListEnumSwapTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SwapType[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    points?: IntFilter<"User"> | number
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    items?: ItemListRelationFilter
    swapRequests?: SwapRequestListRelationFilter
    userSwaps?: UserSwapListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    points?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    items?: ItemOrderByRelationAggregateInput
    swapRequests?: SwapRequestOrderByRelationAggregateInput
    userSwaps?: UserSwapOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    points?: IntFilter<"User"> | number
    isAdmin?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    items?: ItemListRelationFilter
    swapRequests?: SwapRequestListRelationFilter
    userSwaps?: UserSwapListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    points?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    points?: IntWithAggregatesFilter<"User"> | number
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: StringFilter<"Item"> | string
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    category?: StringFilter<"Item"> | string
    type?: StringFilter<"Item"> | string
    size?: StringFilter<"Item"> | string
    condition?: StringFilter<"Item"> | string
    tags?: StringNullableListFilter<"Item">
    images?: StringNullableListFilter<"Item">
    uploaderId?: StringFilter<"Item"> | string
    status?: EnumItemStatusFilter<"Item"> | $Enums.ItemStatus
    createdAt?: DateTimeFilter<"Item"> | Date | string
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    swapRequests?: SwapRequestListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    size?: SortOrder
    condition?: SortOrder
    tags?: SortOrder
    images?: SortOrder
    uploaderId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    uploader?: UserOrderByWithRelationInput
    swapRequests?: SwapRequestOrderByRelationAggregateInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    category?: StringFilter<"Item"> | string
    type?: StringFilter<"Item"> | string
    size?: StringFilter<"Item"> | string
    condition?: StringFilter<"Item"> | string
    tags?: StringNullableListFilter<"Item">
    images?: StringNullableListFilter<"Item">
    uploaderId?: StringFilter<"Item"> | string
    status?: EnumItemStatusFilter<"Item"> | $Enums.ItemStatus
    createdAt?: DateTimeFilter<"Item"> | Date | string
    uploader?: XOR<UserScalarRelationFilter, UserWhereInput>
    swapRequests?: SwapRequestListRelationFilter
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    size?: SortOrder
    condition?: SortOrder
    tags?: SortOrder
    images?: SortOrder
    uploaderId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Item"> | string
    title?: StringWithAggregatesFilter<"Item"> | string
    description?: StringWithAggregatesFilter<"Item"> | string
    category?: StringWithAggregatesFilter<"Item"> | string
    type?: StringWithAggregatesFilter<"Item"> | string
    size?: StringWithAggregatesFilter<"Item"> | string
    condition?: StringWithAggregatesFilter<"Item"> | string
    tags?: StringNullableListFilter<"Item">
    images?: StringNullableListFilter<"Item">
    uploaderId?: StringWithAggregatesFilter<"Item"> | string
    status?: EnumItemStatusWithAggregatesFilter<"Item"> | $Enums.ItemStatus
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
  }

  export type SwapRequestWhereInput = {
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    itemId?: StringFilter<"SwapRequest"> | string
    requesterId?: StringFilter<"SwapRequest"> | string
    type?: EnumSwapTypeFilter<"SwapRequest"> | $Enums.SwapType
    status?: EnumRequestStatusFilter<"SwapRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SwapRequestOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    requesterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    item?: ItemOrderByWithRelationInput
    requester?: UserOrderByWithRelationInput
  }

  export type SwapRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SwapRequestWhereInput | SwapRequestWhereInput[]
    OR?: SwapRequestWhereInput[]
    NOT?: SwapRequestWhereInput | SwapRequestWhereInput[]
    itemId?: StringFilter<"SwapRequest"> | string
    requesterId?: StringFilter<"SwapRequest"> | string
    type?: EnumSwapTypeFilter<"SwapRequest"> | $Enums.SwapType
    status?: EnumRequestStatusFilter<"SwapRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
    item?: XOR<ItemScalarRelationFilter, ItemWhereInput>
    requester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SwapRequestOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    requesterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: SwapRequestCountOrderByAggregateInput
    _max?: SwapRequestMaxOrderByAggregateInput
    _min?: SwapRequestMinOrderByAggregateInput
  }

  export type SwapRequestScalarWhereWithAggregatesInput = {
    AND?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    OR?: SwapRequestScalarWhereWithAggregatesInput[]
    NOT?: SwapRequestScalarWhereWithAggregatesInput | SwapRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SwapRequest"> | string
    itemId?: StringWithAggregatesFilter<"SwapRequest"> | string
    requesterId?: StringWithAggregatesFilter<"SwapRequest"> | string
    type?: EnumSwapTypeWithAggregatesFilter<"SwapRequest"> | $Enums.SwapType
    status?: EnumRequestStatusWithAggregatesFilter<"SwapRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"SwapRequest"> | Date | string
  }

  export type SwapWhereInput = {
    AND?: SwapWhereInput | SwapWhereInput[]
    OR?: SwapWhereInput[]
    NOT?: SwapWhereInput | SwapWhereInput[]
    id?: StringFilter<"Swap"> | string
    itemIds?: StringNullableListFilter<"Swap">
    type?: EnumSwapTypeFilter<"Swap"> | $Enums.SwapType
    createdAt?: DateTimeFilter<"Swap"> | Date | string
    userSwaps?: UserSwapListRelationFilter
  }

  export type SwapOrderByWithRelationInput = {
    id?: SortOrder
    itemIds?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    userSwaps?: UserSwapOrderByRelationAggregateInput
  }

  export type SwapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SwapWhereInput | SwapWhereInput[]
    OR?: SwapWhereInput[]
    NOT?: SwapWhereInput | SwapWhereInput[]
    itemIds?: StringNullableListFilter<"Swap">
    type?: EnumSwapTypeFilter<"Swap"> | $Enums.SwapType
    createdAt?: DateTimeFilter<"Swap"> | Date | string
    userSwaps?: UserSwapListRelationFilter
  }, "id">

  export type SwapOrderByWithAggregationInput = {
    id?: SortOrder
    itemIds?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: SwapCountOrderByAggregateInput
    _max?: SwapMaxOrderByAggregateInput
    _min?: SwapMinOrderByAggregateInput
  }

  export type SwapScalarWhereWithAggregatesInput = {
    AND?: SwapScalarWhereWithAggregatesInput | SwapScalarWhereWithAggregatesInput[]
    OR?: SwapScalarWhereWithAggregatesInput[]
    NOT?: SwapScalarWhereWithAggregatesInput | SwapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Swap"> | string
    itemIds?: StringNullableListFilter<"Swap">
    type?: EnumSwapTypeWithAggregatesFilter<"Swap"> | $Enums.SwapType
    createdAt?: DateTimeWithAggregatesFilter<"Swap"> | Date | string
  }

  export type UserSwapWhereInput = {
    AND?: UserSwapWhereInput | UserSwapWhereInput[]
    OR?: UserSwapWhereInput[]
    NOT?: UserSwapWhereInput | UserSwapWhereInput[]
    id?: StringFilter<"UserSwap"> | string
    userId?: StringFilter<"UserSwap"> | string
    swapId?: StringFilter<"UserSwap"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapScalarRelationFilter, SwapWhereInput>
  }

  export type UserSwapOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    swapId?: SortOrder
    user?: UserOrderByWithRelationInput
    swap?: SwapOrderByWithRelationInput
  }

  export type UserSwapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserSwapWhereInput | UserSwapWhereInput[]
    OR?: UserSwapWhereInput[]
    NOT?: UserSwapWhereInput | UserSwapWhereInput[]
    userId?: StringFilter<"UserSwap"> | string
    swapId?: StringFilter<"UserSwap"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    swap?: XOR<SwapScalarRelationFilter, SwapWhereInput>
  }, "id">

  export type UserSwapOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    swapId?: SortOrder
    _count?: UserSwapCountOrderByAggregateInput
    _max?: UserSwapMaxOrderByAggregateInput
    _min?: UserSwapMinOrderByAggregateInput
  }

  export type UserSwapScalarWhereWithAggregatesInput = {
    AND?: UserSwapScalarWhereWithAggregatesInput | UserSwapScalarWhereWithAggregatesInput[]
    OR?: UserSwapScalarWhereWithAggregatesInput[]
    NOT?: UserSwapScalarWhereWithAggregatesInput | UserSwapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSwap"> | string
    userId?: StringWithAggregatesFilter<"UserSwap"> | string
    swapId?: StringWithAggregatesFilter<"UserSwap"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemCreateNestedManyWithoutUploaderInput
    swapRequests?: SwapRequestCreateNestedManyWithoutRequesterInput
    userSwaps?: UserSwapCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUploaderInput
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutRequesterInput
    userSwaps?: UserSwapUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUploaderNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutRequesterNestedInput
    userSwaps?: UserSwapUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUploaderNestedInput
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutRequesterNestedInput
    userSwaps?: UserSwapUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    status?: $Enums.ItemStatus
    createdAt?: Date | string
    uploader: UserCreateNestedOneWithoutItemsInput
    swapRequests?: SwapRequestCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    uploaderId: string
    status?: $Enums.ItemStatus
    createdAt?: Date | string
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutItemsNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    uploaderId?: StringFieldUpdateOperationsInput | string
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    uploaderId: string
    status?: $Enums.ItemStatus
    createdAt?: Date | string
  }

  export type ItemUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    uploaderId?: StringFieldUpdateOperationsInput | string
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestCreateInput = {
    id?: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutSwapRequestsInput
    requester: UserCreateNestedOneWithoutSwapRequestsInput
  }

  export type SwapRequestUncheckedCreateInput = {
    id?: string
    itemId: string
    requesterId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type SwapRequestUpdateInput = {
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutSwapRequestsNestedInput
    requester?: UserUpdateOneRequiredWithoutSwapRequestsNestedInput
  }

  export type SwapRequestUncheckedUpdateInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestCreateManyInput = {
    id?: string
    itemId: string
    requesterId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type SwapRequestUpdateManyMutationInput = {
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUncheckedUpdateManyInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapCreateInput = {
    id?: string
    itemIds?: SwapCreateitemIdsInput | string[]
    type: $Enums.SwapType
    createdAt?: Date | string
    userSwaps?: UserSwapCreateNestedManyWithoutSwapInput
  }

  export type SwapUncheckedCreateInput = {
    id?: string
    itemIds?: SwapCreateitemIdsInput | string[]
    type: $Enums.SwapType
    createdAt?: Date | string
    userSwaps?: UserSwapUncheckedCreateNestedManyWithoutSwapInput
  }

  export type SwapUpdateInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSwaps?: UserSwapUpdateManyWithoutSwapNestedInput
  }

  export type SwapUncheckedUpdateInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userSwaps?: UserSwapUncheckedUpdateManyWithoutSwapNestedInput
  }

  export type SwapCreateManyInput = {
    id?: string
    itemIds?: SwapCreateitemIdsInput | string[]
    type: $Enums.SwapType
    createdAt?: Date | string
  }

  export type SwapUpdateManyMutationInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapUncheckedUpdateManyInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSwapCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutUserSwapsInput
    swap: SwapCreateNestedOneWithoutUserSwapsInput
  }

  export type UserSwapUncheckedCreateInput = {
    id?: string
    userId: string
    swapId: string
  }

  export type UserSwapUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserSwapsNestedInput
    swap?: SwapUpdateOneRequiredWithoutUserSwapsNestedInput
  }

  export type UserSwapUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    swapId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSwapCreateManyInput = {
    id?: string
    userId: string
    swapId: string
  }

  export type UserSwapUpdateManyMutationInput = {

  }

  export type UserSwapUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    swapId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type SwapRequestListRelationFilter = {
    every?: SwapRequestWhereInput
    some?: SwapRequestWhereInput
    none?: SwapRequestWhereInput
  }

  export type UserSwapListRelationFilter = {
    every?: UserSwapWhereInput
    some?: UserSwapWhereInput
    none?: UserSwapWhereInput
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwapRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSwapOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    points?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    points?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    points?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumItemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemStatus | EnumItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumItemStatusFilter<$PrismaModel> | $Enums.ItemStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    size?: SortOrder
    condition?: SortOrder
    tags?: SortOrder
    images?: SortOrder
    uploaderId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    size?: SortOrder
    condition?: SortOrder
    uploaderId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    type?: SortOrder
    size?: SortOrder
    condition?: SortOrder
    uploaderId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumItemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemStatus | EnumItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumItemStatusWithAggregatesFilter<$PrismaModel> | $Enums.ItemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumItemStatusFilter<$PrismaModel>
    _max?: NestedEnumItemStatusFilter<$PrismaModel>
  }

  export type EnumSwapTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapType | EnumSwapTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapTypeFilter<$PrismaModel> | $Enums.SwapType
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type ItemScalarRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type SwapRequestCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    requesterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type SwapRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    requesterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type SwapRequestMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    requesterId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumSwapTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapType | EnumSwapTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapTypeWithAggregatesFilter<$PrismaModel> | $Enums.SwapType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSwapTypeFilter<$PrismaModel>
    _max?: NestedEnumSwapTypeFilter<$PrismaModel>
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type SwapCountOrderByAggregateInput = {
    id?: SortOrder
    itemIds?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type SwapMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type SwapMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type SwapScalarRelationFilter = {
    is?: SwapWhereInput
    isNot?: SwapWhereInput
  }

  export type UserSwapCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    swapId?: SortOrder
  }

  export type UserSwapMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    swapId?: SortOrder
  }

  export type UserSwapMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    swapId?: SortOrder
  }

  export type ItemCreateNestedManyWithoutUploaderInput = {
    create?: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput> | ItemCreateWithoutUploaderInput[] | ItemUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUploaderInput | ItemCreateOrConnectWithoutUploaderInput[]
    createMany?: ItemCreateManyUploaderInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type SwapRequestCreateNestedManyWithoutRequesterInput = {
    create?: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput> | SwapRequestCreateWithoutRequesterInput[] | SwapRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRequesterInput | SwapRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: SwapRequestCreateManyRequesterInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type UserSwapCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput> | UserSwapCreateWithoutUserInput[] | UserSwapUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutUserInput | UserSwapCreateOrConnectWithoutUserInput[]
    createMany?: UserSwapCreateManyUserInputEnvelope
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput> | ItemCreateWithoutUploaderInput[] | ItemUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUploaderInput | ItemCreateOrConnectWithoutUploaderInput[]
    createMany?: ItemCreateManyUploaderInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type SwapRequestUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput> | SwapRequestCreateWithoutRequesterInput[] | SwapRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRequesterInput | SwapRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: SwapRequestCreateManyRequesterInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type UserSwapUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput> | UserSwapCreateWithoutUserInput[] | UserSwapUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutUserInput | UserSwapCreateOrConnectWithoutUserInput[]
    createMany?: UserSwapCreateManyUserInputEnvelope
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ItemUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput> | ItemCreateWithoutUploaderInput[] | ItemUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUploaderInput | ItemCreateOrConnectWithoutUploaderInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUploaderInput | ItemUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: ItemCreateManyUploaderInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUploaderInput | ItemUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUploaderInput | ItemUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type SwapRequestUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput> | SwapRequestCreateWithoutRequesterInput[] | SwapRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRequesterInput | SwapRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutRequesterInput | SwapRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: SwapRequestCreateManyRequesterInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutRequesterInput | SwapRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutRequesterInput | SwapRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type UserSwapUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput> | UserSwapCreateWithoutUserInput[] | UserSwapUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutUserInput | UserSwapCreateOrConnectWithoutUserInput[]
    upsert?: UserSwapUpsertWithWhereUniqueWithoutUserInput | UserSwapUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSwapCreateManyUserInputEnvelope
    set?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    disconnect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    delete?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    update?: UserSwapUpdateWithWhereUniqueWithoutUserInput | UserSwapUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSwapUpdateManyWithWhereWithoutUserInput | UserSwapUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput> | ItemCreateWithoutUploaderInput[] | ItemUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUploaderInput | ItemCreateOrConnectWithoutUploaderInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUploaderInput | ItemUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: ItemCreateManyUploaderInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUploaderInput | ItemUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUploaderInput | ItemUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type SwapRequestUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput> | SwapRequestCreateWithoutRequesterInput[] | SwapRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutRequesterInput | SwapRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutRequesterInput | SwapRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: SwapRequestCreateManyRequesterInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutRequesterInput | SwapRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutRequesterInput | SwapRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type UserSwapUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput> | UserSwapCreateWithoutUserInput[] | UserSwapUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutUserInput | UserSwapCreateOrConnectWithoutUserInput[]
    upsert?: UserSwapUpsertWithWhereUniqueWithoutUserInput | UserSwapUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSwapCreateManyUserInputEnvelope
    set?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    disconnect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    delete?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    update?: UserSwapUpdateWithWhereUniqueWithoutUserInput | UserSwapUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSwapUpdateManyWithWhereWithoutUserInput | UserSwapUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
  }

  export type ItemCreatetagsInput = {
    set: string[]
  }

  export type ItemCreateimagesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutItemsInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    connect?: UserWhereUniqueInput
  }

  export type SwapRequestCreateNestedManyWithoutItemInput = {
    create?: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput> | SwapRequestCreateWithoutItemInput[] | SwapRequestUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutItemInput | SwapRequestCreateOrConnectWithoutItemInput[]
    createMany?: SwapRequestCreateManyItemInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type SwapRequestUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput> | SwapRequestCreateWithoutItemInput[] | SwapRequestUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutItemInput | SwapRequestCreateOrConnectWithoutItemInput[]
    createMany?: SwapRequestCreateManyItemInputEnvelope
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
  }

  export type ItemUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ItemUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumItemStatusFieldUpdateOperationsInput = {
    set?: $Enums.ItemStatus
  }

  export type UserUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutItemsInput
    upsert?: UserUpsertWithoutItemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutItemsInput, UserUpdateWithoutItemsInput>, UserUncheckedUpdateWithoutItemsInput>
  }

  export type SwapRequestUpdateManyWithoutItemNestedInput = {
    create?: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput> | SwapRequestCreateWithoutItemInput[] | SwapRequestUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutItemInput | SwapRequestCreateOrConnectWithoutItemInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutItemInput | SwapRequestUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SwapRequestCreateManyItemInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutItemInput | SwapRequestUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutItemInput | SwapRequestUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type SwapRequestUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput> | SwapRequestCreateWithoutItemInput[] | SwapRequestUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SwapRequestCreateOrConnectWithoutItemInput | SwapRequestCreateOrConnectWithoutItemInput[]
    upsert?: SwapRequestUpsertWithWhereUniqueWithoutItemInput | SwapRequestUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SwapRequestCreateManyItemInputEnvelope
    set?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    disconnect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    delete?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    connect?: SwapRequestWhereUniqueInput | SwapRequestWhereUniqueInput[]
    update?: SwapRequestUpdateWithWhereUniqueWithoutItemInput | SwapRequestUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SwapRequestUpdateManyWithWhereWithoutItemInput | SwapRequestUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
  }

  export type ItemCreateNestedOneWithoutSwapRequestsInput = {
    create?: XOR<ItemCreateWithoutSwapRequestsInput, ItemUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutSwapRequestsInput
    connect?: ItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSwapRequestsInput = {
    create?: XOR<UserCreateWithoutSwapRequestsInput, UserUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumSwapTypeFieldUpdateOperationsInput = {
    set?: $Enums.SwapType
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type ItemUpdateOneRequiredWithoutSwapRequestsNestedInput = {
    create?: XOR<ItemCreateWithoutSwapRequestsInput, ItemUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutSwapRequestsInput
    upsert?: ItemUpsertWithoutSwapRequestsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutSwapRequestsInput, ItemUpdateWithoutSwapRequestsInput>, ItemUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutSwapRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSwapRequestsInput, UserUncheckedCreateWithoutSwapRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSwapRequestsInput
    upsert?: UserUpsertWithoutSwapRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSwapRequestsInput, UserUpdateWithoutSwapRequestsInput>, UserUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type SwapCreateitemIdsInput = {
    set: string[]
  }

  export type UserSwapCreateNestedManyWithoutSwapInput = {
    create?: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput> | UserSwapCreateWithoutSwapInput[] | UserSwapUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutSwapInput | UserSwapCreateOrConnectWithoutSwapInput[]
    createMany?: UserSwapCreateManySwapInputEnvelope
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
  }

  export type UserSwapUncheckedCreateNestedManyWithoutSwapInput = {
    create?: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput> | UserSwapCreateWithoutSwapInput[] | UserSwapUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutSwapInput | UserSwapCreateOrConnectWithoutSwapInput[]
    createMany?: UserSwapCreateManySwapInputEnvelope
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
  }

  export type SwapUpdateitemIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserSwapUpdateManyWithoutSwapNestedInput = {
    create?: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput> | UserSwapCreateWithoutSwapInput[] | UserSwapUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutSwapInput | UserSwapCreateOrConnectWithoutSwapInput[]
    upsert?: UserSwapUpsertWithWhereUniqueWithoutSwapInput | UserSwapUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: UserSwapCreateManySwapInputEnvelope
    set?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    disconnect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    delete?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    update?: UserSwapUpdateWithWhereUniqueWithoutSwapInput | UserSwapUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: UserSwapUpdateManyWithWhereWithoutSwapInput | UserSwapUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
  }

  export type UserSwapUncheckedUpdateManyWithoutSwapNestedInput = {
    create?: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput> | UserSwapCreateWithoutSwapInput[] | UserSwapUncheckedCreateWithoutSwapInput[]
    connectOrCreate?: UserSwapCreateOrConnectWithoutSwapInput | UserSwapCreateOrConnectWithoutSwapInput[]
    upsert?: UserSwapUpsertWithWhereUniqueWithoutSwapInput | UserSwapUpsertWithWhereUniqueWithoutSwapInput[]
    createMany?: UserSwapCreateManySwapInputEnvelope
    set?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    disconnect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    delete?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    connect?: UserSwapWhereUniqueInput | UserSwapWhereUniqueInput[]
    update?: UserSwapUpdateWithWhereUniqueWithoutSwapInput | UserSwapUpdateWithWhereUniqueWithoutSwapInput[]
    updateMany?: UserSwapUpdateManyWithWhereWithoutSwapInput | UserSwapUpdateManyWithWhereWithoutSwapInput[]
    deleteMany?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserSwapsInput = {
    create?: XOR<UserCreateWithoutUserSwapsInput, UserUncheckedCreateWithoutUserSwapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSwapsInput
    connect?: UserWhereUniqueInput
  }

  export type SwapCreateNestedOneWithoutUserSwapsInput = {
    create?: XOR<SwapCreateWithoutUserSwapsInput, SwapUncheckedCreateWithoutUserSwapsInput>
    connectOrCreate?: SwapCreateOrConnectWithoutUserSwapsInput
    connect?: SwapWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSwapsNestedInput = {
    create?: XOR<UserCreateWithoutUserSwapsInput, UserUncheckedCreateWithoutUserSwapsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSwapsInput
    upsert?: UserUpsertWithoutUserSwapsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSwapsInput, UserUpdateWithoutUserSwapsInput>, UserUncheckedUpdateWithoutUserSwapsInput>
  }

  export type SwapUpdateOneRequiredWithoutUserSwapsNestedInput = {
    create?: XOR<SwapCreateWithoutUserSwapsInput, SwapUncheckedCreateWithoutUserSwapsInput>
    connectOrCreate?: SwapCreateOrConnectWithoutUserSwapsInput
    upsert?: SwapUpsertWithoutUserSwapsInput
    connect?: SwapWhereUniqueInput
    update?: XOR<XOR<SwapUpdateToOneWithWhereWithoutUserSwapsInput, SwapUpdateWithoutUserSwapsInput>, SwapUncheckedUpdateWithoutUserSwapsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumItemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemStatus | EnumItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumItemStatusFilter<$PrismaModel> | $Enums.ItemStatus
  }

  export type NestedEnumItemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ItemStatus | EnumItemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ItemStatus[] | ListEnumItemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumItemStatusWithAggregatesFilter<$PrismaModel> | $Enums.ItemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumItemStatusFilter<$PrismaModel>
    _max?: NestedEnumItemStatusFilter<$PrismaModel>
  }

  export type NestedEnumSwapTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapType | EnumSwapTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapTypeFilter<$PrismaModel> | $Enums.SwapType
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumSwapTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SwapType | EnumSwapTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SwapType[] | ListEnumSwapTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSwapTypeWithAggregatesFilter<$PrismaModel> | $Enums.SwapType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSwapTypeFilter<$PrismaModel>
    _max?: NestedEnumSwapTypeFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type ItemCreateWithoutUploaderInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    status?: $Enums.ItemStatus
    createdAt?: Date | string
    swapRequests?: SwapRequestCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateWithoutUploaderInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    status?: $Enums.ItemStatus
    createdAt?: Date | string
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutUploaderInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput>
  }

  export type ItemCreateManyUploaderInputEnvelope = {
    data: ItemCreateManyUploaderInput | ItemCreateManyUploaderInput[]
  }

  export type SwapRequestCreateWithoutRequesterInput = {
    id?: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    item: ItemCreateNestedOneWithoutSwapRequestsInput
  }

  export type SwapRequestUncheckedCreateWithoutRequesterInput = {
    id?: string
    itemId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type SwapRequestCreateOrConnectWithoutRequesterInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput>
  }

  export type SwapRequestCreateManyRequesterInputEnvelope = {
    data: SwapRequestCreateManyRequesterInput | SwapRequestCreateManyRequesterInput[]
  }

  export type UserSwapCreateWithoutUserInput = {
    id?: string
    swap: SwapCreateNestedOneWithoutUserSwapsInput
  }

  export type UserSwapUncheckedCreateWithoutUserInput = {
    id?: string
    swapId: string
  }

  export type UserSwapCreateOrConnectWithoutUserInput = {
    where: UserSwapWhereUniqueInput
    create: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput>
  }

  export type UserSwapCreateManyUserInputEnvelope = {
    data: UserSwapCreateManyUserInput | UserSwapCreateManyUserInput[]
  }

  export type ItemUpsertWithWhereUniqueWithoutUploaderInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutUploaderInput, ItemUncheckedUpdateWithoutUploaderInput>
    create: XOR<ItemCreateWithoutUploaderInput, ItemUncheckedCreateWithoutUploaderInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutUploaderInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutUploaderInput, ItemUncheckedUpdateWithoutUploaderInput>
  }

  export type ItemUpdateManyWithWhereWithoutUploaderInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutUploaderInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: StringFilter<"Item"> | string
    title?: StringFilter<"Item"> | string
    description?: StringFilter<"Item"> | string
    category?: StringFilter<"Item"> | string
    type?: StringFilter<"Item"> | string
    size?: StringFilter<"Item"> | string
    condition?: StringFilter<"Item"> | string
    tags?: StringNullableListFilter<"Item">
    images?: StringNullableListFilter<"Item">
    uploaderId?: StringFilter<"Item"> | string
    status?: EnumItemStatusFilter<"Item"> | $Enums.ItemStatus
    createdAt?: DateTimeFilter<"Item"> | Date | string
  }

  export type SwapRequestUpsertWithWhereUniqueWithoutRequesterInput = {
    where: SwapRequestWhereUniqueInput
    update: XOR<SwapRequestUpdateWithoutRequesterInput, SwapRequestUncheckedUpdateWithoutRequesterInput>
    create: XOR<SwapRequestCreateWithoutRequesterInput, SwapRequestUncheckedCreateWithoutRequesterInput>
  }

  export type SwapRequestUpdateWithWhereUniqueWithoutRequesterInput = {
    where: SwapRequestWhereUniqueInput
    data: XOR<SwapRequestUpdateWithoutRequesterInput, SwapRequestUncheckedUpdateWithoutRequesterInput>
  }

  export type SwapRequestUpdateManyWithWhereWithoutRequesterInput = {
    where: SwapRequestScalarWhereInput
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyWithoutRequesterInput>
  }

  export type SwapRequestScalarWhereInput = {
    AND?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    OR?: SwapRequestScalarWhereInput[]
    NOT?: SwapRequestScalarWhereInput | SwapRequestScalarWhereInput[]
    id?: StringFilter<"SwapRequest"> | string
    itemId?: StringFilter<"SwapRequest"> | string
    requesterId?: StringFilter<"SwapRequest"> | string
    type?: EnumSwapTypeFilter<"SwapRequest"> | $Enums.SwapType
    status?: EnumRequestStatusFilter<"SwapRequest"> | $Enums.RequestStatus
    createdAt?: DateTimeFilter<"SwapRequest"> | Date | string
  }

  export type UserSwapUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSwapWhereUniqueInput
    update: XOR<UserSwapUpdateWithoutUserInput, UserSwapUncheckedUpdateWithoutUserInput>
    create: XOR<UserSwapCreateWithoutUserInput, UserSwapUncheckedCreateWithoutUserInput>
  }

  export type UserSwapUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSwapWhereUniqueInput
    data: XOR<UserSwapUpdateWithoutUserInput, UserSwapUncheckedUpdateWithoutUserInput>
  }

  export type UserSwapUpdateManyWithWhereWithoutUserInput = {
    where: UserSwapScalarWhereInput
    data: XOR<UserSwapUpdateManyMutationInput, UserSwapUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSwapScalarWhereInput = {
    AND?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
    OR?: UserSwapScalarWhereInput[]
    NOT?: UserSwapScalarWhereInput | UserSwapScalarWhereInput[]
    id?: StringFilter<"UserSwap"> | string
    userId?: StringFilter<"UserSwap"> | string
    swapId?: StringFilter<"UserSwap"> | string
  }

  export type UserCreateWithoutItemsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    swapRequests?: SwapRequestCreateNestedManyWithoutRequesterInput
    userSwaps?: UserSwapCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutItemsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutRequesterInput
    userSwaps?: UserSwapUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
  }

  export type SwapRequestCreateWithoutItemInput = {
    id?: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
    requester: UserCreateNestedOneWithoutSwapRequestsInput
  }

  export type SwapRequestUncheckedCreateWithoutItemInput = {
    id?: string
    requesterId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type SwapRequestCreateOrConnectWithoutItemInput = {
    where: SwapRequestWhereUniqueInput
    create: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput>
  }

  export type SwapRequestCreateManyItemInputEnvelope = {
    data: SwapRequestCreateManyItemInput | SwapRequestCreateManyItemInput[]
  }

  export type UserUpsertWithoutItemsInput = {
    update: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
    create: XOR<UserCreateWithoutItemsInput, UserUncheckedCreateWithoutItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutItemsInput, UserUncheckedUpdateWithoutItemsInput>
  }

  export type UserUpdateWithoutItemsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swapRequests?: SwapRequestUpdateManyWithoutRequesterNestedInput
    userSwaps?: UserSwapUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutItemsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutRequesterNestedInput
    userSwaps?: UserSwapUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SwapRequestUpsertWithWhereUniqueWithoutItemInput = {
    where: SwapRequestWhereUniqueInput
    update: XOR<SwapRequestUpdateWithoutItemInput, SwapRequestUncheckedUpdateWithoutItemInput>
    create: XOR<SwapRequestCreateWithoutItemInput, SwapRequestUncheckedCreateWithoutItemInput>
  }

  export type SwapRequestUpdateWithWhereUniqueWithoutItemInput = {
    where: SwapRequestWhereUniqueInput
    data: XOR<SwapRequestUpdateWithoutItemInput, SwapRequestUncheckedUpdateWithoutItemInput>
  }

  export type SwapRequestUpdateManyWithWhereWithoutItemInput = {
    where: SwapRequestScalarWhereInput
    data: XOR<SwapRequestUpdateManyMutationInput, SwapRequestUncheckedUpdateManyWithoutItemInput>
  }

  export type ItemCreateWithoutSwapRequestsInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    status?: $Enums.ItemStatus
    createdAt?: Date | string
    uploader: UserCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateWithoutSwapRequestsInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    uploaderId: string
    status?: $Enums.ItemStatus
    createdAt?: Date | string
  }

  export type ItemCreateOrConnectWithoutSwapRequestsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutSwapRequestsInput, ItemUncheckedCreateWithoutSwapRequestsInput>
  }

  export type UserCreateWithoutSwapRequestsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemCreateNestedManyWithoutUploaderInput
    userSwaps?: UserSwapCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSwapRequestsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUploaderInput
    userSwaps?: UserSwapUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSwapRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSwapRequestsInput, UserUncheckedCreateWithoutSwapRequestsInput>
  }

  export type ItemUpsertWithoutSwapRequestsInput = {
    update: XOR<ItemUpdateWithoutSwapRequestsInput, ItemUncheckedUpdateWithoutSwapRequestsInput>
    create: XOR<ItemCreateWithoutSwapRequestsInput, ItemUncheckedCreateWithoutSwapRequestsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutSwapRequestsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutSwapRequestsInput, ItemUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type ItemUpdateWithoutSwapRequestsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutSwapRequestsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    uploaderId?: StringFieldUpdateOperationsInput | string
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSwapRequestsInput = {
    update: XOR<UserUpdateWithoutSwapRequestsInput, UserUncheckedUpdateWithoutSwapRequestsInput>
    create: XOR<UserCreateWithoutSwapRequestsInput, UserUncheckedCreateWithoutSwapRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSwapRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSwapRequestsInput, UserUncheckedUpdateWithoutSwapRequestsInput>
  }

  export type UserUpdateWithoutSwapRequestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUploaderNestedInput
    userSwaps?: UserSwapUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSwapRequestsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUploaderNestedInput
    userSwaps?: UserSwapUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserSwapCreateWithoutSwapInput = {
    id?: string
    user: UserCreateNestedOneWithoutUserSwapsInput
  }

  export type UserSwapUncheckedCreateWithoutSwapInput = {
    id?: string
    userId: string
  }

  export type UserSwapCreateOrConnectWithoutSwapInput = {
    where: UserSwapWhereUniqueInput
    create: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput>
  }

  export type UserSwapCreateManySwapInputEnvelope = {
    data: UserSwapCreateManySwapInput | UserSwapCreateManySwapInput[]
  }

  export type UserSwapUpsertWithWhereUniqueWithoutSwapInput = {
    where: UserSwapWhereUniqueInput
    update: XOR<UserSwapUpdateWithoutSwapInput, UserSwapUncheckedUpdateWithoutSwapInput>
    create: XOR<UserSwapCreateWithoutSwapInput, UserSwapUncheckedCreateWithoutSwapInput>
  }

  export type UserSwapUpdateWithWhereUniqueWithoutSwapInput = {
    where: UserSwapWhereUniqueInput
    data: XOR<UserSwapUpdateWithoutSwapInput, UserSwapUncheckedUpdateWithoutSwapInput>
  }

  export type UserSwapUpdateManyWithWhereWithoutSwapInput = {
    where: UserSwapScalarWhereInput
    data: XOR<UserSwapUpdateManyMutationInput, UserSwapUncheckedUpdateManyWithoutSwapInput>
  }

  export type UserCreateWithoutUserSwapsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemCreateNestedManyWithoutUploaderInput
    swapRequests?: SwapRequestCreateNestedManyWithoutRequesterInput
  }

  export type UserUncheckedCreateWithoutUserSwapsInput = {
    id?: string
    email: string
    password: string
    name: string
    points?: number
    isAdmin?: boolean
    createdAt?: Date | string
    items?: ItemUncheckedCreateNestedManyWithoutUploaderInput
    swapRequests?: SwapRequestUncheckedCreateNestedManyWithoutRequesterInput
  }

  export type UserCreateOrConnectWithoutUserSwapsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSwapsInput, UserUncheckedCreateWithoutUserSwapsInput>
  }

  export type SwapCreateWithoutUserSwapsInput = {
    id?: string
    itemIds?: SwapCreateitemIdsInput | string[]
    type: $Enums.SwapType
    createdAt?: Date | string
  }

  export type SwapUncheckedCreateWithoutUserSwapsInput = {
    id?: string
    itemIds?: SwapCreateitemIdsInput | string[]
    type: $Enums.SwapType
    createdAt?: Date | string
  }

  export type SwapCreateOrConnectWithoutUserSwapsInput = {
    where: SwapWhereUniqueInput
    create: XOR<SwapCreateWithoutUserSwapsInput, SwapUncheckedCreateWithoutUserSwapsInput>
  }

  export type UserUpsertWithoutUserSwapsInput = {
    update: XOR<UserUpdateWithoutUserSwapsInput, UserUncheckedUpdateWithoutUserSwapsInput>
    create: XOR<UserCreateWithoutUserSwapsInput, UserUncheckedCreateWithoutUserSwapsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSwapsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSwapsInput, UserUncheckedUpdateWithoutUserSwapsInput>
  }

  export type UserUpdateWithoutUserSwapsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutUploaderNestedInput
    swapRequests?: SwapRequestUpdateManyWithoutRequesterNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSwapsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUncheckedUpdateManyWithoutUploaderNestedInput
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutRequesterNestedInput
  }

  export type SwapUpsertWithoutUserSwapsInput = {
    update: XOR<SwapUpdateWithoutUserSwapsInput, SwapUncheckedUpdateWithoutUserSwapsInput>
    create: XOR<SwapCreateWithoutUserSwapsInput, SwapUncheckedCreateWithoutUserSwapsInput>
    where?: SwapWhereInput
  }

  export type SwapUpdateToOneWithWhereWithoutUserSwapsInput = {
    where?: SwapWhereInput
    data: XOR<SwapUpdateWithoutUserSwapsInput, SwapUncheckedUpdateWithoutUserSwapsInput>
  }

  export type SwapUpdateWithoutUserSwapsInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapUncheckedUpdateWithoutUserSwapsInput = {
    itemIds?: SwapUpdateitemIdsInput | string[]
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateManyUploaderInput = {
    id?: string
    title: string
    description: string
    category: string
    type: string
    size: string
    condition: string
    tags?: ItemCreatetagsInput | string[]
    images?: ItemCreateimagesInput | string[]
    status?: $Enums.ItemStatus
    createdAt?: Date | string
  }

  export type SwapRequestCreateManyRequesterInput = {
    id?: string
    itemId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type UserSwapCreateManyUserInput = {
    id?: string
    swapId: string
  }

  export type ItemUpdateWithoutUploaderInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swapRequests?: SwapRequestUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateWithoutUploaderInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swapRequests?: SwapRequestUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutUploaderInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    size?: StringFieldUpdateOperationsInput | string
    condition?: StringFieldUpdateOperationsInput | string
    tags?: ItemUpdatetagsInput | string[]
    images?: ItemUpdateimagesInput | string[]
    status?: EnumItemStatusFieldUpdateOperationsInput | $Enums.ItemStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUpdateWithoutRequesterInput = {
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutSwapRequestsNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutRequesterInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUncheckedUpdateManyWithoutRequesterInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSwapUpdateWithoutUserInput = {
    swap?: SwapUpdateOneRequiredWithoutUserSwapsNestedInput
  }

  export type UserSwapUncheckedUpdateWithoutUserInput = {
    swapId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSwapUncheckedUpdateManyWithoutUserInput = {
    swapId?: StringFieldUpdateOperationsInput | string
  }

  export type SwapRequestCreateManyItemInput = {
    id?: string
    requesterId: string
    type: $Enums.SwapType
    status?: $Enums.RequestStatus
    createdAt?: Date | string
  }

  export type SwapRequestUpdateWithoutItemInput = {
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSwapRequestsNestedInput
  }

  export type SwapRequestUncheckedUpdateWithoutItemInput = {
    requesterId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwapRequestUncheckedUpdateManyWithoutItemInput = {
    requesterId?: StringFieldUpdateOperationsInput | string
    type?: EnumSwapTypeFieldUpdateOperationsInput | $Enums.SwapType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSwapCreateManySwapInput = {
    id?: string
    userId: string
  }

  export type UserSwapUpdateWithoutSwapInput = {
    user?: UserUpdateOneRequiredWithoutUserSwapsNestedInput
  }

  export type UserSwapUncheckedUpdateWithoutSwapInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSwapUncheckedUpdateManyWithoutSwapInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}